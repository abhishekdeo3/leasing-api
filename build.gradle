buildscript {
    ext {
        springBootVersion = '2.7.5'
        springDocVersion = '1.6.12'
        lombokVersion = '1.18.24'
        springSecurityVersion = '5.7.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.owasp:dependency-check-gradle:7.4.4'
    }
}

plugins {
    id 'java'
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.14.RELEASE"
    id 'jacoco'
}

apply plugin: 'org.owasp.dependencycheck'

project.ext {
    serviceName = rootProject.name
}

group = "com.allane"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

ext['tomcat.version'] = '9.0.70'

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    implementation('org.flywaydb:flyway-core')
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.32'
    implementation("org.flywaydb:flyway-mysql")

    testImplementation("org.springframework.boot:spring-boot-starter-test")

    implementation("org.springdoc:springdoc-openapi-ui:${springDocVersion}")
    implementation("org.springdoc:springdoc-openapi-data-rest:${springDocVersion}")
    implementation("org.springdoc:springdoc-openapi-security:${springDocVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:3.0.2")

    // Lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    // Version overrides
    implementation('org.yaml:snakeyaml:1.33')
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-crypto:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-core:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")

    // Test
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('org.testcontainers:mysql:1.17.6')
    testImplementation('org.testcontainers:junit-jupiter:1.17.2')
    testImplementation 'com.h2database:h2'

}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.83
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.88
            }
        }
    }
}

dependencyCheck {
    cveValidForHours = 24
    suppressionFile = 'dependencySuppressions.xml'
    failBuildOnCVSS = 7
    analyzers {
        assemblyEnabled = false
        nexusEnabled = false
        nuspecEnabled = false
        nodeEnabled = false
    }
}

